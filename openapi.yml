openapi: 3.0.3
info:
  title: Course Manager API
  version: v1
paths:
  /accounts:
    post:
      tags:
        - Accounts
      summary: Create an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
            example:
              username: janedoe
              password: p@ssword
      responses:
        201:
          description: Account created.
        400:
          description: Invalid request.
        409:
          description: Account already exists.
  /accounts/{userId}:
    parameters:
      - $ref: '#/components/parameters/PathAccountId'
    put:
      tags:
        - Accounts
      summary: Modify account
      responses:
        200:
          description: Account updated.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        404:
          description: Not found.
    delete:
      tags:
        - Accounts
      summary: Delete account
      responses:
        204:
          description: Account deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /accounts/{userId}/login:
    parameters:
      - $ref: '#/components/parameters/PathAccountId'
    put:
      tags:
        - Accounts
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
            example:
              password: p@ssword
      responses:
        200:
          description: Authenticated.
        400:
          description: Invalid request.
        403:
          description: Access denied.
  /accounts/{userId}/logout:
    parameters:
      - $ref: '#/components/parameters/PathAccountId'
    put:
      tags:
        - Accounts
      summary: Log out
      responses:
        200:
          description: Logged out.
        403:
          description: Access denied.
  /courses:
    get:
      tags:
        - Courses
      summary: Get courses
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courses'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    post:
      tags:
        - Courses
      summary: Create a course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - courseName
              properties:
                courseName:
                  type: string
            example:
              courseName: ITC 410
      responses:
        201:
          description: Course created.
        400:
          description: Invalid request.
        409:
          description: Course already exists.
  /courses/{courseId}:
    parameters:
      - $ref: '#/components/parameters/PathCourseId'
    get:
      tags:
        - Assignments
      summary: Get course assignments
      parameters:
        - name: courseId
          in: query
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    post:
      tags:
        - Assignments
      summary: Create an assignment
      requestBody:
        $ref: '#/components/requestBodies/CreateAssignment'
      responses:
        201:
          description: Assignment created.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    put:
      tags:
        - Courses
      summary: Modify a course
      requestBody:
        $ref: '#/components/requestBodies/ModifyAssignment'
      responses:
        200:
          description: Course modified.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
        404:
          description: Not found.
    delete:
      tags:
        - Courses
      summary: Delete a course
      responses:
        204:
          description: Course deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /courses/{courseId}/{asgmtId}:
    parameters:
      - $ref: '#/components/parameters/PathCourseId'
      - $ref: '#/components/parameters/PathAssignmentId'
    put:
      tags:
        - Assignments
      summary: Modify an assignment
      requestBody:
        $ref: '#/components/requestBodies/CreateCourse'
      responses:
        200:
          description: Assignment modified.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
        404:
          description: Not found.
    delete:
      tags:
        - Assignments
      summary: Delete an assignment
      responses:
        204:
          description: Assignment deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /assignments:
    get:
      tags:
        - Assignments
      summary: Get all assignments
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
components:
  parameters:
    PathAccountId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    PathCourseId:
      name: courseId
      in: path
      required: true
      schema:
        type: string
    PathAssignmentId:
      name: asgmtId
      in: path
      required: true
      schema:
        type: string
  requestBodies:
    CreateAccount:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    ModifyAccount:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    AccountLogIn:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    AccountLogOut:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    CreateCourse:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'
    GetCourseAssignments:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'
    CreateAssignment:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assignment'
    ModifyCourse:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'
    ModifyAssignment:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assignment'
  schemas:
    Account:
      type: object
      properties:
        userId:
          type: string
          readOnly: true
        userName:
          type: string
        password:
          type: string
          format: password
        loggedIn:
          type: boolean
        courses:
          $ref: '#/components/schemas/Courses'
    Courses:
      type: array
      items:
        type: object
        properties:
          courseId:
            type: string
            readOnly: true
          courseName:
            type: string
    Course:
      type: object
      properties:
        courseId:
          type: string
          readOnly: true
        courseName:
          type: string
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
    Assignment:
      type: object
      properties:
        asgmtId:
          type: string
          readOnly: true
        courseId:
          type: string
          readOnly: true
        asgmtName:
          type: string
        dueDate:
          type: string
          format: date-time
        completed:
          type: boolean
          nullable: true